definitions:
  customer.Customer:
    properties:
      address:
        type: string
      bussiness_phone:
        type: string
      city:
        type: string
      company:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
    type: object
  customer.CustomersList:
    properties:
      data:
        items:
          $ref: '#/definitions/customer.Customer'
        type: array
      total_records:
        type: integer
    type: object
  customer.getCustomersRequest:
    properties:
      limit:
        type: integer
      offset:
        type: integer
    type: object
  employee.Employee:
    properties:
      address:
        type: string
      bussinessPhone:
        type: string
      company:
        type: string
      emailAddress:
        type: string
      faxNumber:
        type: string
      firstName:
        type: string
      homePhone:
        type: string
      id:
        type: integer
      jobTitle:
        type: string
      lastName:
        type: string
      mobilePhone:
        type: string
    type: object
  employee.EmployeeTop:
    properties:
      email_address:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      total_sellings:
        type: string
    type: object
  employee.EmployeesList:
    properties:
      data:
        items:
          $ref: '#/definitions/employee.Employee'
        type: array
      total_records:
        type: integer
    type: object
  employee.addEmployeeRequest:
    properties:
      address:
        type: string
      businessPhone:
        type: string
      company:
        type: string
      emailAddress:
        type: string
      faxNumber:
        type: string
      firstName:
        type: string
      homePhone:
        type: string
      jobTitle:
        type: string
      lastName:
        type: string
      mobilePhone:
        type: string
    type: object
  employee.getEmployeesRequest:
    properties:
      limit:
        type: integer
      offset:
        type: integer
    type: object
  employee.updateEmployeeRequest:
    properties:
      address:
        type: string
      businessPhone:
        type: string
      company:
        type: string
      emailAddress:
        type: string
      faxNumber:
        type: string
      firstName:
        type: string
      homePhone:
        type: string
      id:
        type: integer
      jobTitle:
        type: string
      lastName:
        type: string
      mobilePhone:
        type: string
    type: object
  order.OrderDetaiItem:
    properties:
      id:
        type: integer
      order_id:
        type: integer
      product_id:
        type: integer
      product_name:
        type: string
      quantity:
        type: number
      unit_price:
        type: number
    type: object
  order.OrderItem:
    properties:
      address:
        type: string
      city:
        type: string
      company:
        type: string
      customer:
        type: string
      customer_id:
        type: string
      data:
        items:
          $ref: '#/definitions/order.OrderDetaiItem'
        type: array
      id:
        type: integer
      order_date:
        type: string
      phone:
        type: string
      status_id:
        type: string
      status_name:
        type: string
    type: object
  order.OrderItemDeleted:
    properties:
      data:
        $ref: '#/definitions/order.OrderItem'
        type: object
      rows_affected:
        type: integer
    type: object
  order.OrderList:
    properties:
      data:
        items:
          $ref: '#/definitions/order.OrderItem'
        type: array
      total_records:
        type: integer
    type: object
  order.addOrderDetailRequest:
    properties:
      orderId:
        type: integer
      productId:
        type: integer
      quantity:
        type: number
      unitPrice:
        type: number
    type: object
  order.addOrderRequest:
    properties:
      customerId:
        type: integer
      orderDate:
        type: string
      orderDetails:
        items:
          $ref: '#/definitions/order.addOrderDetailRequest'
        type: array
    type: object
  order.getOrdersRequest:
    properties:
      dateFrom:
        type: object
      dateTo:
        type: object
      limit:
        type: integer
      offset:
        type: integer
      status:
        type: object
    type: object
  product.Product:
    properties:
      category:
        type: string
      description:
        type: string
      id:
        type: integer
      listPrice:
        type: number
      productCode:
        type: string
      productName:
        type: string
      standardCost:
        type: number
    type: object
  product.ProductTop:
    properties:
      id:
        type: integer
      productCode:
        type: string
      productName:
        type: string
      sold:
        type: number
    type: object
  product.ProductTopResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/product.ProductTop'
        type: array
      totalSellings:
        type: number
    type: object
  product.ProductsList:
    properties:
      data:
        items:
          $ref: '#/definitions/product.Product'
        type: array
      totalRecords:
        type: integer
    type: object
  product.getAddProductRequest:
    properties:
      category:
        type: string
      description:
        type: string
      listPrice:
        type: number
      productCode:
        type: string
      productName:
        type: string
      standardCost:
        type: number
    type: object
  product.getProductsRequest:
    properties:
      limit:
        type: integer
      offset:
        type: integer
    type: object
  product.getUpdateProductRequest:
    properties:
      category:
        type: string
      description:
        type: string
      id:
        type: integer
      listPrice:
        type: number
      productCode:
        type: string
      productName:
        type: string
      standardCost:
        type: number
    type: object
info:
  contact:
    email: sevann.radhak@gmail.com
    name: Sevann Radhak
    url: http://github.com/sevannr
  description: This is a sample server celler developed with Golang and MariaDB
  license: {}
  title: Products with Golang - API
  version: "1.0"
paths:
  /customers/paginated:
    post:
      consumes:
      - application/json
      parameters:
      - description: User data
        in: body
        name: getCustomers
        required: true
        schema:
          $ref: '#/definitions/customer.getCustomersRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Paginate list of customers
          schema:
            $ref: '#/definitions/customer.CustomersList'
      summary: Customers list
      tags:
      - Customer
  /employees/:
    post:
      consumes:
      - application/json
      parameters:
      - description: User data
        in: body
        name: addEmployeeRequest
        required: true
        schema:
          $ref: '#/definitions/employee.addEmployeeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: New employee created
          schema:
            $ref: '#/definitions/employee.Employee'
      summary: Create new Employee
      tags:
      - Employee
    put:
      consumes:
      - application/json
      parameters:
      - description: User data
        in: body
        name: updateEmployeeRequest
        required: true
        schema:
          $ref: '#/definitions/employee.updateEmployeeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Employee updated
          schema:
            $ref: '#/definitions/employee.Employee'
      summary: Update an Employee
      tags:
      - Employee
  /employees/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Employee Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Employee
          schema:
            $ref: '#/definitions/employee.Employee'
      summary: Delete Employee by Id
      tags:
      - Employee
    get:
      consumes:
      - application/json
      parameters:
      - description: Employee Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Employee
          schema:
            $ref: '#/definitions/employee.Employee'
      summary: Employee by Id
      tags:
      - Employee
  /employees/best-seller:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: Best Employee
          schema:
            $ref: '#/definitions/employee.EmployeeTop'
      summary: Best Employee
      tags:
      - Employee
  /employees/paginated:
    post:
      consumes:
      - application/json
      parameters:
      - description: User data
        in: body
        name: getEmployees
        required: true
        schema:
          $ref: '#/definitions/employee.getEmployeesRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Paginate list of employees
          schema:
            $ref: '#/definitions/employee.EmployeesList'
      summary: Employees list
      tags:
      - Employee
  /orders/:
    post:
      consumes:
      - application/json
      parameters:
      - description: User data
        in: body
        name: addOrderRequest
        required: true
        schema:
          $ref: '#/definitions/order.addOrderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: New order created
          schema:
            $ref: '#/definitions/order.OrderItem'
      summary: Create new Order
      tags:
      - Order
  /orders/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: User data
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Order deleted and rows affected
          schema:
            $ref: '#/definitions/order.OrderItemDeleted'
      summary: Delete Order
      tags:
      - Order
    get:
      consumes:
      - application/json
      parameters:
      - description: User data
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Order with details
          schema:
            $ref: '#/definitions/order.OrderItem'
      summary: Get Order by Id
      tags:
      - Order
  /orders/{id}/detail/{orderDetailId}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: User data
        in: path
        name: orderDetailId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: integer
      summary: Delete OrderDetail
      tags:
      - Order
  /orders/paginated:
    post:
      consumes:
      - application/json
      parameters:
      - description: User data
        in: body
        name: getOrdersRequest
        required: true
        schema:
          $ref: '#/definitions/order.getOrdersRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Orders list paginated
          schema:
            $ref: '#/definitions/order.OrderList'
      summary: Get Orders
      tags:
      - Order
  /products:
    put:
      consumes:
      - application/json
      parameters:
      - description: User data
        in: body
        name: updateProductRequest
        required: true
        schema:
          $ref: '#/definitions/product.getUpdateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Product updated
          schema:
            $ref: '#/definitions/product.Product'
      summary: Update Product
      tags:
      - Product
  /products/:
    post:
      consumes:
      - application/json
      parameters:
      - description: User data
        in: body
        name: addProductRequest
        required: true
        schema:
          $ref: '#/definitions/product.getAddProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: New product created
          schema:
            $ref: '#/definitions/product.Product'
      summary: Create new Product
      tags:
      - Product
  /products/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: User data
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Product deleted
          schema:
            $ref: '#/definitions/product.Product'
      summary: Delete Product by Id
      tags:
      - Product
    get:
      consumes:
      - application/json
      parameters:
      - description: User data
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Product
          schema:
            $ref: '#/definitions/product.Product'
      summary: Get Product by Id
      tags:
      - Product
  /products/bestselling:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: Top ten best selling products
          schema:
            $ref: '#/definitions/product.ProductTopResponse'
      summary: Get best selling Products
      tags:
      - Product
  /products/paginated:
    post:
      consumes:
      - application/json
      parameters:
      - description: User data
        in: body
        name: getProductsRequest
        required: true
        schema:
          $ref: '#/definitions/product.getProductsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Products paginated
          schema:
            $ref: '#/definitions/product.ProductsList'
      summary: Products list
      tags:
      - Product
swagger: "2.0"
