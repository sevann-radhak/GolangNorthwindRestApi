// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"html/template"
	"strings"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Sevann Radhak",
            "url": "http://github.com/sevannr",
            "email": "sevann.radhak@gmail.com"
        },
        "license": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/customers/paginated": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customer"
                ],
                "summary": "Customers list",
                "parameters": [
                    {
                        "description": "User data",
                        "name": "getCustomers",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/customer.getCustomersRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Paginate list of customers",
                        "schema": {
                            "$ref": "#/definitions/customer.CustomersList"
                        }
                    }
                }
            }
        },
        "/employees/": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Employee"
                ],
                "summary": "Update an Emplyee",
                "parameters": [
                    {
                        "description": "User data",
                        "name": "updateEmployeeRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/employee.updateEmployeeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Employee updated",
                        "schema": {
                            "$ref": "#/definitions/employee.Employee"
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Employee"
                ],
                "summary": "Create new Emplyee",
                "parameters": [
                    {
                        "description": "User data",
                        "name": "addEmployeeRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/employee.addEmployeeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "New employee created",
                        "schema": {
                            "$ref": "#/definitions/employee.Employee"
                        }
                    }
                }
            }
        },
        "/employees/best-seller": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Employee"
                ],
                "summary": "Best Emplyee",
                "responses": {
                    "200": {
                        "description": "Best Employee",
                        "schema": {
                            "$ref": "#/definitions/employee.EmployeeTop"
                        }
                    }
                }
            }
        },
        "/employees/paginated": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Employee"
                ],
                "summary": "Emplyees list",
                "parameters": [
                    {
                        "description": "User data",
                        "name": "getEmployees",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/employee.getEmployeesRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Paginate list of employees",
                        "schema": {
                            "$ref": "#/definitions/employee.EmployeesList"
                        }
                    }
                }
            }
        },
        "/employees/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Employee"
                ],
                "summary": "Emplyee by Id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Employee Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Employee",
                        "schema": {
                            "$ref": "#/definitions/employee.Employee"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Employee"
                ],
                "summary": "Delete Emplyee by Id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Employee Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Employee",
                        "schema": {
                            "$ref": "#/definitions/employee.Employee"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "customer.Customer": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "bussiness_phone": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "company": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "last_name": {
                    "type": "string"
                }
            }
        },
        "customer.CustomersList": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/customer.Customer"
                    }
                },
                "total_records": {
                    "type": "integer"
                }
            }
        },
        "customer.getCustomersRequest": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                }
            }
        },
        "employee.Employee": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "bussiness_phone": {
                    "type": "string"
                },
                "company": {
                    "type": "string"
                },
                "email_address": {
                    "type": "string"
                },
                "fax_number": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "home_phone": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "job_title": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "mobile_phone": {
                    "type": "string"
                }
            }
        },
        "employee.EmployeeTop": {
            "type": "object",
            "properties": {
                "email_address": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "last_name": {
                    "type": "string"
                },
                "total_sellings": {
                    "type": "string"
                }
            }
        },
        "employee.EmployeesList": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/employee.Employee"
                    }
                },
                "total_records": {
                    "type": "integer"
                }
            }
        },
        "employee.addEmployeeRequest": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "businessPhone": {
                    "type": "string"
                },
                "company": {
                    "type": "string"
                },
                "emailAddress": {
                    "type": "string"
                },
                "faxNumber": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "homePhone": {
                    "type": "string"
                },
                "jobTitle": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "mobilePhone": {
                    "type": "string"
                }
            }
        },
        "employee.getEmployeesRequest": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                }
            }
        },
        "employee.updateEmployeeRequest": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "businessPhone": {
                    "type": "string"
                },
                "company": {
                    "type": "string"
                },
                "emailAddress": {
                    "type": "string"
                },
                "faxNumber": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "homePhone": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "jobTitle": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "mobilePhone": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "Products with Golang - API",
	Description: "This is a sample server celler developed with Golang and MariaDB",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
